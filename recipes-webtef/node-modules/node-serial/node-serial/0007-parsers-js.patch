From 7ee8d0ce81b80d646d6525fc47c9f25fdcb6e03b Mon Sep 17 00:00:00 2001
From: WANGA <andrea_gai@virgilio.it>
Date: Sat, 24 Mar 2018 09:35:23 +0100
Subject: [PATCH] package.json parsers.js serialport.js


diff --git a/parsers.js b/parsers.js
index 8d87052..e6a0c09 100644
--- a/parsers.js
+++ b/parsers.js
@@ -1,27 +1,26 @@
-/*jslint node: true */
 'use strict';

 // Copyright 2011 Chris Williams <chris@iterativedesigns.com>

 module.exports = {
-  raw: function (emitter, buffer) {
+  raw: function(emitter, buffer) {
     emitter.emit('data', buffer);
   },

-  //encoding: ascii utf8 utf16le ucs2 base64 binary hex
-  //More: http://nodejs.org/api/buffer.html#buffer_buffer
-  readline: function (delimiter, encoding) {
-    if (typeof delimiter === 'undefined' || delimiter === null) { delimiter = '\r'; }
-    if (typeof encoding  === 'undefined' || encoding  === null) { encoding  = 'utf8'; }
+  // encoding: ascii utf8 utf16le ucs2 base64 binary hex
+  // More: http://nodejs.org/api/buffer.html#buffer_buffer
+  readline: function(delimiter, encoding) {
+    if (typeof delimiter === 'undefined' || delimiter === null) { delimiter = '\r' }
+    if (typeof encoding === 'undefined' || encoding === null) { encoding = 'utf8' }
     // Delimiter buffer saved in closure
     var data = '';
-    return function (emitter, buffer) {
+    return function(emitter, buffer) {
       // Collect data
       data += buffer.toString(encoding);
       // Split collected data by delimiter
       var parts = data.split(delimiter);
       data = parts.pop();
-      parts.forEach(function (part) {
+      parts.forEach(function(part) {
         emitter.emit('data', part);
       });
     };
@@ -30,13 +29,36 @@ module.exports = {
   // Emit a data event every `length` bytes
   byteLength: function(length) {
     var data = new Buffer(0);
-    return function(emitter, buffer){
+    return function(emitter, buffer) {
       data = Buffer.concat([data, buffer]);
       while (data.length >= length) {
-        var out = data.slice(0,length);
+        var out = data.slice(0, length);
         data = data.slice(length);
         emitter.emit('data', out);
       }
     };
+  },
+
+  // Emit a data event each time a byte sequence (delimiter is an array of byte) is found
+  // Sample usage : byteDelimiter([10, 13])
+  byteDelimiter: function(delimiter) {
+    if (Object.prototype.toString.call(delimiter) !== '[object Array]') {
+      delimiter = [ delimiter ];
+    }
+    var buf = [];
+    var nextDelimIndex = 0;
+    return function(emitter, buffer) {
+      for (var i = 0; i < buffer.length; i++) {
+        buf[buf.length] = buffer[i];
+        if (buf[buf.length - 1] === delimiter[nextDelimIndex]) {
+          nextDelimIndex++;
+        }
+        if (nextDelimIndex === delimiter.length) {
+          emitter.emit('data', buf);
+          buf = [];
+          nextDelimIndex = 0;
+        }
+      }
+    };
   }
 };
--
2.7.4
